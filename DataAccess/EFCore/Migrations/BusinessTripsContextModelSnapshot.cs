// <auto-generated />
using System;
using BusinessTrips.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessTrips.DataAccess.EFCore.Migrations
{
    [DbContext(typeof(BusinessTripsContext))]
    partial class BusinessTripsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessTrips.Models.BusinessTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accomodation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BTOId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoingToId")
                        .HasColumnType("int");

                    b.Property<int>("LeavingFromId")
                        .HasColumnType("int");

                    b.Property<string>("MeanOfTransportation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedOfBankCard")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedOfPhone")
                        .HasColumnType("bit");

                    b.Property<string>("PMName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BTOId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GoingToId");

                    b.HasIndex("LeavingFromId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessTrips");
                });

            modelBuilder.Entity("BusinessTrips.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BusinessTrips.Models.ClientLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ClientLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dublin"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cairo"
                        });
                });

            modelBuilder.Entity("BusinessTrips.Models.CompanyHQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("companyHQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Craiova"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sibiu"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cluj-Napoca"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Timisoara"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bucuresti"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brasov"
                        });
                });

            modelBuilder.Entity("BusinessTrips.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Nemesis",
                            Number = "bd009"
                        });
                });

            modelBuilder.Entity("BusinessTrips.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "task1",
                            Number = "skvn",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("BusinessTrips.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BusinessTrips.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessTrips.Models.BusinessTrip", b =>
                {
                    b.HasOne("BusinessTrips.Models.User", "BTO")
                        .WithMany("ManagedBusinessTrips")
                        .HasForeignKey("BTOId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("BusinessTrips.Models.Client", "Client")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("BusinessTrips.Models.ClientLocation", "GoingTo")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("GoingToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("BusinessTrips.Models.CompanyHQ", "LeavingFrom")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("LeavingFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("BusinessTrips.Models.Project", "Project")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("BusinessTrips.Models.ProjectTask", "ProjectTask")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("BusinessTrips.Models.User", "User")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("BTO");

                    b.Navigation("Client");

                    b.Navigation("GoingTo");

                    b.Navigation("LeavingFrom");

                    b.Navigation("Project");

                    b.Navigation("ProjectTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessTrips.Models.ProjectTask", b =>
                {
                    b.HasOne("BusinessTrips.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessTrips.Models.User", b =>
                {
                    b.HasOne("BusinessTrips.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("BusinessTrips.Models.Client", b =>
                {
                    b.Navigation("BusinessTrips");
                });

            modelBuilder.Entity("BusinessTrips.Models.ClientLocation", b =>
                {
                    b.Navigation("BusinessTrips");
                });

            modelBuilder.Entity("BusinessTrips.Models.CompanyHQ", b =>
                {
                    b.Navigation("BusinessTrips");
                });

            modelBuilder.Entity("BusinessTrips.Models.Project", b =>
                {
                    b.Navigation("BusinessTrips");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BusinessTrips.Models.ProjectTask", b =>
                {
                    b.Navigation("BusinessTrips");
                });

            modelBuilder.Entity("BusinessTrips.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessTrips.Models.User", b =>
                {
                    b.Navigation("BusinessTrips");

                    b.Navigation("ManagedBusinessTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
